/*
웹서버
- 요청된 웹페이지나 정보를 제공하는 서버, 주로 정적인 컨텐츠(파일, 이미지 등등)를 제공
- 대표제품: 아파치, nginx
was(web application server)
- 동적인 웹 애플리케이션을 싱행하는데 사용되는 서버
  단독으로 사용하기 보다 웹 서버 뒤에서 요청에 대한 응답을 제공
- 웹프레임워클르 실행시켜서 요청받은 데이터를 처리하는 역할을 잘함
  
1.2.백엔드 개발자의 업무 프로세스
과제할당 -> 과제분석 -> 개발 -> 테스트 -> QA -> 배포 -> 유지보수

1.과제할당
-업무할당

2.과제분석
ex) 친구 초대 이벤트를 만들어 달라는 요청을 받았을 때
친구는 무엇인지, 초대는 무엇인지, 이벤트에는 어떤 조건이 필요하고 초대를 한 친구와 초대를 받은 친구에게는 어떤 보상을 줄지
이벤트를 위해서 어떤 데이터들을 저장할지 등을 결정

3.개발
개발

4.테스트
테스트 코드를 작성하면서 개발하여, 내가 작성한 코드가 문제 없는지 확인

5.QA(quality assurance)
성능적 결함이나 로직 오류를 점검

6.배포

7.유지보수

1.3.백엔드 아키텍쳐
아키택쳐란 총체적으로 종합적이고 상세하게 개발을 준비하는 것
1.계층형 아키택쳐(layered architecture)
소프트웨어를 몇 가지 계층으로 나누어서 만드는 방식
각 계층에서는 주어진 역할(프레젠테이션, 비즈니스 로직, 데이터 저장 etc)을 수행하며, 의존성이 단방향이어야 한다.
예를 들어 프리젠테이션 계층은 비즈니스 계층에만, 비즈니스 계층은 영속성 게층에만 의존성을 가지게 되는 것을 의미한다.
장점으로는 계층이 분리 및 격리되어 있기 때문에 복잡도가 감소하며, 계층 내에서는 관련된 응집도가 높아지며, 테스트하기 쉽다는 장점이 있습니다
단점으로는 다른 아키텍쳐에 비해 에플리케이션의 규모가 커지게 되면 계층이 거대해지면서 유지보수가 힘들어지고, 개발 속도가 떨어진다는 점

2.이벤트기반 아키텍쳐(event-driven architerture)
이벤트의 상태 변화에 대응하는 소프트웨어 설계 패턴
이벤트는 외부에서 시스템에 영향을 주는 상황들을 의미하며, 사용자가 로그인을 하거나 게시글을 쓴다거나 하는 일들이 이벤트에 속합니다.
이벤트 기반 아키택처는 이벤트를 발생시키는 프로듀서와 이벤트를 전달하는 브로커, 이벤트를 받는 컨슈머로 구성됩니다.
이벤트 기반 아키텍쳐는 모든 요청을 비동기로 처리하므로 확작성이 좋고 아키택쳐 내 컴포넌트 간 의존성을 줄일 수 있습니다.
이벤트를 비동기로 처리하기 때문에 이벤트의 순서를 보장하기 어렵습니다.

3.마이크로 서비스 아키텍쳐(micro service arciterture)
시스템을 여러 개의 작은 서비스로 나누어 관리하는 방식
서비스는 독립적으로 개발, 배포, 운영되며, 서로 구조적으로 분리되어 있습니다.
이러한 분리 덕분에 각 서비스는 독립적으로 업데이트 및 스케일링이 가능하고, 시스템 전체의 구조는 더욱 간결해집니다.
msa는 대규모 시스템을 구축하는 데 유용합니다.
마이크로 서비스 아키택쳐는 계정관리. 쇼핑몰 상품관리 등 하나의 도메인 당 하나의 서비스로 쪼개는 것이 좋습니다.
마이크로 서비스는 확장성이 좋고, 업그레이트가 용이하다는 장점이 있지만, 트랜잭션을 처리하려면 분산 트랜잭션 등을 고려해야 하므로 난이도가 올라갑니다.

*
도메인 : 사용자가 요구하는 문제 분야 내에서의 상황이나 내용


*/